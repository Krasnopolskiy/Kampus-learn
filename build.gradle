buildscript {
    ext.kotlinVersion = '1.9.10'
    ext.ktorVersion = '2.3.4'
    apply plugin: 'hyperskill'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
    }
}

plugins {
    id "io.ktor.plugin" version "$ktorVersion"
    id "org.jetbrains.kotlin.plugin.serialization" version "$kotlinVersion"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "io.ktor:ktor-server-core:$ktorVersion"
    implementation "io.ktor:ktor-server-netty:$ktorVersion"

    testImplementation "io.ktor:ktor-server-tests-jvm"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlinVersion"
    testImplementation "io.ktor:ktor-client-mock:$ktorVersion"
}

def printOutput(def output) {
    return tasks.create("printOutput") {
        println "#educational_plugin_checker_version 1"
        def separator = System.lineSeparator()
        def lines = output.toString().split("(?<=${separator})|(?=${separator})")
        for (line in lines) {
            println "#educational_plugin" + line
        }
    }
}

subprojects {
    apply plugin: 'application'
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'hyperskill'

    repositories {
        mavenCentral()
        maven { url 'https://packages.jetbrains.team/maven/p/hyperskill-hs-test/maven' }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        testImplementation 'com.github.hyperskill:hs-test:release-SNAPSHOT'
    }

    sourceSets {
        main.java.srcDir 'src'
        test.java.srcDir 'test'
    }

    test {
        systemProperty "file.encoding", "utf-8"
        outputs.upToDateWhen { false }
    }

    compileJava.options.encoding = 'utf-8'
    tasks.withType(JavaCompile) {
        options.encoding = 'utf-8'
    }
}

project(':util') {
    dependencies {
        implementation 'com.github.hyperskill:hs-test:release-SNAPSHOT'
    }
}

configure(subprojects.findAll {it.name != 'util'}) {
    dependencies {
        testImplementation project(':util').sourceSets.main.output
        testImplementation project(':util').sourceSets.test.output
    }
}