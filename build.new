val kotlin_version = "1.9.10"

plugins {
    kotlin("jvm") version "1.9.10"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    testImplementation(project(":stage1."))
}

fun printOutput(output: Any) {
    tasks.create("printOutput") {
        println("#educational_plugin_checker_version 1")
        val separator = System.lineSeparator()
        val lines = output.toString().split("(?<=$separator)|(?=$separator)")
        for (line in lines) {
            println("#educational_plugin$line")
        }
    }
}

subprojects {
    apply {
        plugin("org.jetbrains.kotlin.jvm")
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
        testImplementation("io.ktor:ktor-client-mock:2.3.4")
        testImplementation("junit:junit:4.12")
    }

    sourceSets {
        named("main") {
            kotlin.srcDirs("src")
            java.srcDirs("src")
        }
        named("test") {
            kotlin.srcDirs("test")
            java.srcDirs("test")
        }
    }

//    mainClassName = if (project.hasProperty("mainClass")) project.property("mainClass") as String else ""

//    tasks.named<Test>("test") {
//        outputs.upToDateWhen { false }
//        afterTest { test, result ->
//            if (result.resultType == TestResult.ResultType.FAILURE) {
//                val message = result.exception?.message ?: "Wrong answer"
//                val lines = message.readLines()
//                println("#educational_plugin FAILED + ${lines[0]}")
//                lines.subList(1, lines.size).forEach { line ->
//                    println("#educational_plugin$line")
//                }
//                println() // We need this to separate output of different tests
//            }
//        }
//    }

//    if (project.hasProperty("educationalRun") && "true".equals(project.property("educationalRun"), ignoreCase = true)) {
//        val runOutput = ByteArrayOutputStream()
//        tasks.getByName("run") {
//            standardOutput = runOutput
//        }
//        tasks.getByName("run") {
//            doLast { printOutput(runOutput) }
//        }
//    }
}

project(":util") {
    dependencies {
        implementation("junit:junit:4.12")
    }
}

//configure(subprojects.findAll { it.name != "util" }) {
//    dependencies {
//        implementation(project(":util").sourceSets.getByName("main").output)
//        testImplementation(project(":util").sourceSets.getByName("test").output)
//    }
//}
